"use client";

import Header from "@/components/Header";
import NewFooter from "@/components/NewFooter";
import Preloader from "@/components/Preloader";
import React, { useState } from "react";
import { FiX } from "react-icons/fi";

const Notes: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string | null>(null);
  const [selectedChapter, setSelectedChapter] = useState<string | null>(null);
  const [selectedPdf, setSelectedPdf] = useState<string | null>(null);

  const handleCategoryClick = (category: string) => {
    setSelectedCategory(category);
    setActiveTab(null); // Reset tab when a new category is selected
    setSelectedChapter(null);
  };

  const handleTabClick = (tab: string) => {
    setActiveTab(tab);
    setSelectedChapter(null); // Reset chapter view when switching tabs
  };

  const handleChapterClick = (pdf: string) => {
    setSelectedPdf(pdf);
  };

  const handleCloseCategory = () => {
    setSelectedCategory(null);
    setActiveTab(null);
    setSelectedChapter(null);
    setSelectedPdf(null);
  };

  const handleClosePdf = () => {
    setSelectedPdf(null);
  };

  // Sample PDFs organized by class and tab
  const pdfs = {
    "10th Class": {
      "Sample Papers": [
        { chapter: "Math Chapter 1", filename: "math_chapter1_10.pdf" },
        { chapter: "Science Chapter 1", filename: "science_chapter1_10.pdf" },
      ],
      "Important Notes": [
        { chapter: "Biology Chapter 1", filename: "bio_chapter1_10.pdf" },
        { chapter: "Chemistry Reactions", filename: "chem_reactions_10.pdf" },
      ],
      "Other Activities": [
        { chapter: "Physics Experiments", filename: "physics_experiments_10.pdf" },
        { chapter: "Chemistry Labs", filename: "chemistry_labs_10.pdf" },
      ],
    },
    "+1 Class": {
      "Sample Papers": [
        { chapter: "Math Chapter 1", filename: "math_chapter1_11.pdf" },
        { chapter: "Physics Chapter 1", filename: "physics_chapter1_11.pdf" },
      ],
      "Important Notes": [
        { chapter: "Biology Chapter 1", filename: "bio_chapter1_11.pdf" },
        { chapter: "Chemistry Reactions", filename: "chem_reactions_11.pdf" },
      ],
      "Other Activities": [
        { chapter: "Physics Experiments", filename: "physics_experiments_11.pdf" },
        { chapter: "Chemistry Labs", filename: "chemistry_labs_11.pdf" },
      ],
    },
    "+2 Class": {
      "Sample Papers": [
        { chapter: "Math Chapter 1", filename: "math_chapter1_12.pdf" },
        { chapter: "Physics Chapter 1", filename: "physics_chapter1_12.pdf" },
      ],
      "Important Notes": [
        { chapter: "Biology Chapter 1", filename: "bio_chapter1_12.pdf" },
        { chapter: "Chemistry Reactions", filename: "chem_reactions_12.pdf" },
      ],
      "Other Activities": [
        { chapter: "Physics Experiments", filename: "physics_experiments_12.pdf" },
        { chapter: "Chemistry Labs", filename: "chemistry_labs_12.pdf" },
      ],
    },
  };

  const activeChapters = pdfs[selectedCategory]?.[activeTab] || [];

  return (
    <>
      <Preloader />
      <Header />
      <div className="container mx-auto p-6">
        <h1 className="text-4xl font-semibold text-center text-purple-800 mb-8">
          Notes and Resources
        </h1>

        {/* Category Selection */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {["10th Class", "+1 Class", "+2 Class"].map((category) => (
            <div
              key={category}
              className="bg-purple-600 text-white p-6 rounded-lg shadow-lg hover:scale-105 hover:shadow-2xl transition-all duration-300 transform cursor-pointer"
              onClick={() => handleCategoryClick(category)}
            >
              <h2 className="text-2xl font-semibold mb-2">{category}</h2>
              <p className="text-sm">Resources for {category === "10th Class" ? "10th grade" : category === "+1 Class" ? "11th grade" : "12th grade"}</p>
            </div>
          ))}
        </div>

        {/* Section for Category Details */}
        {selectedCategory && !activeTab && (
          <div className="fixed inset-0 bg-black bg-opacity-75 z-50 flex justify-center items-center p-4 transition-all">
            <div className="relative w-full max-w-4xl bg-white rounded-lg shadow-lg p-8 transform scale-110 transition-all">
              <button
                onClick={handleCloseCategory}
                className="absolute top-4 right-4 bg-purple-600 text-white rounded-full p-2 hover:bg-purple-700 transition"
              >
                <FiX size={24} />
              </button>
              <h2 className="text-3xl font-semibold text-center text-purple-800 mb-6">{selectedCategory} Resources</h2>

              {/* Tabs for Different Sections */}
              <div className="flex justify-center space-x-6 mb-8">
                {["Sample Papers", "Important Notes", "Other Activities"].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => handleTabClick(tab)}
                    className={`flex items-center px-4 py-2 rounded-md transition-all duration-300 ${activeTab === tab ? "bg-purple-700 text-white" : "bg-purple-600 text-white hover:bg-purple-700"}`}
                  >
                    {tab}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Display Chapters in the Selected Tab */}
        {activeTab && !selectedPdf && (
          <div className="fixed inset-0 bg-black bg-opacity-75 z-50 flex justify-center items-center p-4 transition-all">
            <div className="relative w-full max-w-4xl bg-white rounded-lg shadow-lg p-8 transform scale-110 transition-all">
              <button
                onClick={() => setActiveTab(null)}
                className="absolute top-4 right-4 bg-purple-600 text-white rounded-full p-2 hover:bg-purple-700 transition"
              >
                <FiX size={24} />
              </button>
              <h2 className="text-2xl font-semibold text-center text-purple-800 mb-6">
                {activeTab} - {selectedCategory}
              </h2>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {activeChapters.map((pdf) => (
                  <button
                    key={pdf.filename}
                    onClick={() => handleChapterClick(pdf.filename)}
                    className="bg-purple-500 text-white px-4 py-3 rounded-md hover:bg-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    {pdf.chapter}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Modal for PDF Display */}
        {selectedPdf && (
          <div className="fixed inset-0 bg-black bg-opacity-75 z-50 flex justify-center items-center p-4 transition-all">
            <div className="relative w-full max-w-4xl h-full sm:h-[90vh] rounded-lg overflow-hidden bg-white shadow-lg">
              <button
                onClick={handleClosePdf}
                className="absolute top-4 right-4 bg-purple-600 text-white rounded-full p-2 hover:bg-purple-700 transition"
              >
                <FiX size={24} />
              </button>
              <iframe
                src={`/${selectedPdf}`}
                width="100%"
                height="100%"
                className="rounded-lg"
              />
            </div>
          </div>
        )}
      </div>
      <NewFooter />
    </>
  );
};

export default Notes;



// construction page code

// "use client";

// import React, { useState, useEffect } from "react";
// import Header from "@/components/Header";
// import NewFooter from "@/components/NewFooter";
// import Preloader from "@/components/Preloader";

// const Contact: React.FC = () => {
//   const [progress, setProgress] = useState(0);

//   // Simulate loading bar progress
//   useEffect(() => {
//     const interval = setInterval(() => {
//       setProgress((prevProgress) => {
//         if (prevProgress === 100) {
//           clearInterval(interval);
//           return 100;
//         }
//         return prevProgress + 1;
//       });
//     }, 2000); // Adjust the speed as necessary

//     return () => clearInterval(interval); // Cleanup the interval on unmount
//   }, []);

//   return (
//     <>
//       <Preloader />
//       <Header />
//       <div className="container mx-auto p-6">
//         <h1 className="text-4xl font-semibold text-center text-purple-800 mb-8">
//           Contact Us
//         </h1>

//         {/* Under Construction Message */}
//         <div className="text-center text-gray-600 mb-8">
//           <h3 className="text-lg font-medium">This page is under construction.</h3>
//           <p>We are working hard to get it ready and it will be available in coming weeks!</p>
//         </div>

//         {/* Progress Bar */}
//         <div className="w-full bg-gray-300 rounded-full h-4 mb-6">
//           <div
//             className="bg-purple-600 h-full rounded-full"
//             style={{ width: `${progress}%` }}
//           />
//         </div>

//         {/* Status Text */}
//         <div className="text-center text-gray-600">
//           <p>{progress}% completed</p>
//         </div>
//       </div>
//       <NewFooter />
//     </>
//   );
// };

// export default Contact;

// notes section
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { FiArrowLeft, FiBook, FiClipboard, FiEdit, FiMenu, FiX, FiChevronLeft, FiChevronRight, FiDownload, FiEye } from "react-icons/fi";

const Class10Page: React.FC = () => {
  const router = useRouter();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [pdfUrl, setPdfUrl] = useState<string>(""); // URL of the PDF to display
  const [isPdfVisible, setIsPdfVisible] = useState<boolean>(false); // To toggle PDF visibility
  const [selectedSection, setSelectedSection] = useState<string>(""); // Current selected section
  const [currentPage, setCurrentPage] = useState<number>(1); // Current page for pagination
  const [dropdownVisible, setDropdownVisible] = useState<boolean>(false); // To control dropdown visibility
  const [selectedCard, setSelectedCard] = useState<number | null>(null); // To track the clicked card
  const [isMobile, setIsMobile] = useState<boolean>(false); // To detect if the user is on mobile
  const [downloadMessage, setDownloadMessage] = useState<string>(""); // To display the download message
  const cardsPerPage = 5; // Number of cards to display per page

  const totalCards = 50; // Total cards for each section

  // Detect if the user is on mobile (screen width <= 768px)
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    checkIfMobile();
    window.addEventListener("resize", checkIfMobile);

    return () => {
      window.removeEventListener("resize", checkIfMobile);
    };
  }, []);

  // Function to toggle the sidebar visibility
  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  // Handle sidebar link click to show the resource section
  const handleSidebarLinkClick = (section: string) => {
    setSelectedSection(section); // Set selected section for card filtering
    setCurrentPage(1); // Reset to first page when changing section
    setIsSidebarOpen(false); // Close the sidebar after selecting
  };

  // Handle card click to show the dropdown menu
  const handleCardClick = (index: number) => {
    if (selectedCard === index) {
      setDropdownVisible(!dropdownVisible); // Toggle dropdown visibility if the same card is clicked
    } else {
      setSelectedCard(index); // Set the clicked card
      setDropdownVisible(true); // Show the dropdown
    }
  };

  // Close the dropdown when clicking the X
  const closeDropdown = () => {
    setDropdownVisible(false);
    setSelectedCard(null);
  };

  // Handle View PDF action
  const handleViewPdf = (pdfPath: string) => {
    setPdfUrl(pdfPath); // Set the PDF URL based on the clicked card
    setIsPdfVisible(true); // Show the PDF viewer
    setDropdownVisible(false); // Close dropdown when viewing the PDF
  };

  // Handle Download action
  const handleDownloadPdf = (pdfPath: string) => {
    if (isMobile) {
      setDownloadMessage("Your file has been downloaded to your phone's files."); // Show download message on mobile
      setTimeout(() => setDownloadMessage(""), 3000); // Hide the message after 3 seconds
    } else {
      const link = document.createElement("a");
      link.href = pdfPath;
      link.download = pdfPath.split("/").pop() || "download.pdf"; // Download the file
      link.click();
    }
    setDropdownVisible(false); // Close dropdown after download
  };

  // Generate cards dynamically for each section
  const generateCards = () => {
    const cards = [];
    for (let i = 1; i <= totalCards; i++) {
      const pdfPath = `/path/to/${selectedSection}_pdf_${i}.pdf`; // Dynamically generate PDF path
      cards.push(
        <div
          key={i}
          className="cursor-pointer relative bg-purple-600 text-white p-6 rounded-lg shadow-lg hover:shadow-xl hover:bg-purple-700 transition-all duration-300"
          onClick={() => handleCardClick(i)}
        >
          <FiBook className="text-3xl mb-4" />
          <h3 className="text-xl font-semibold">{`${selectedSection} PDF ${i}`}</h3>
          <p className="mt-2 text-sm">Click to view the PDF of {selectedSection} PDF {i}.</p>
          {/* Dropdown Menu */}
          {dropdownVisible && selectedCard === i && (
            <div className="absolute top-0 right-0 bg-white border-2 border-purple-600 rounded-lg shadow-lg p-4 mt-2 w-full sm:w-auto z-10">
              <button
                className="absolute top-2 right-2 text-gray-500"
                onClick={closeDropdown}
              >
                <FiX className="text-lg" />
              </button>
              <ul className="text-sm text-gray-700">
                <li
                  className="flex items-center cursor-pointer py-2 px-3 rounded-lg hover:bg-purple-100 hover:text-purple-600 transition-all"
                  onClick={() => handleViewPdf(pdfPath)}
                >
                  <FiEye className="mr-3" /> View PDF
                </li>
                <li
                  className="flex items-center cursor-pointer py-2 px-3 rounded-lg hover:bg-purple-100 hover:text-purple-600 transition-all"
                  onClick={() => handleDownloadPdf(pdfPath)}
                >
                  <FiDownload className="mr-3" /> Download
                </li>
              </ul>
            </div>
          )}
        </div>
      );
    }
    return cards;
  };

  // Get the current page cards to display based on pagination
  const paginateCards = () => {
    const cards = generateCards();
    const startIndex = (currentPage - 1) * cardsPerPage;
    const endIndex = startIndex + cardsPerPage;
    return cards.slice(startIndex, endIndex);
  };

  // Handle page navigation
  const handlePageChange = (direction: string) => {
    if (direction === "next" && currentPage < Math.ceil(totalCards / cardsPerPage)) {
      setCurrentPage(currentPage + 1);
    } else if (direction === "prev" && currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  // Render different cards based on the selected sidebar section
  const renderCards = () => {
    if (selectedSection === "chapter1") {
      return (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mt-6">
          {paginateCards()}
        </div>
      );
    } else if (selectedSection === "samplepapers") {
      return (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mt-6">
          {paginateCards()}
        </div>
      );
    } else if (selectedSection === "examtips") {
      return (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mt-6">
          {paginateCards()}
        </div>
      );
    } else {
      return (
        <div className="mt-6">
          <h2 className="text-2xl font-semibold text-purple-700 mb-4">Select a Section</h2>
          <p className="text-lg text-gray-700 mb-6">Please select a section from the sidebar to view the resources.</p>
        </div>
      );
    }
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* Sidebar */}
      <div
        className={`w-64 bg-gradient-to-b from-purple-600 to-purple-400 p-6 text-white shadow-lg transition-transform transform ${isSidebarOpen ? "translate-x-0" : "-translate-x-full"} md:translate-x-0 fixed md:relative top-0 left-0 bottom-0 z-10 md:block ease-in-out duration-300`}
      >
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold mb-6 text-white">Class 11 Resources</h2>
          <button className="text-white md:hidden" onClick={toggleSidebar}>
            <FiX className="text-2xl" />
          </button>
        </div>
        <ul>
          <li
            className="mb-4 flex items-center cursor-pointer hover:bg-purple-700 p-2 rounded-lg transition-colors"
            onClick={() => handleSidebarLinkClick("chapter1")}
          >
            <FiBook className="mr-3" /> Chapters 
          </li>
          <li
            className="mb-4 flex items-center cursor-pointer hover:bg-purple-700 p-2 rounded-lg transition-colors"
            onClick={() => handleSidebarLinkClick("samplepapers")}
          >
            <FiClipboard className="mr-3" /> Sample Papers
          </li>
          <li
            className="mb-4 flex items-center cursor-pointer hover:bg-purple-700 p-2 rounded-lg transition-colors"
            onClick={() => handleSidebarLinkClick("examtips")}
          >
            <FiEdit className="mr-3" /> Other Pdfs
          </li>
        </ul>
      </div>

      {/* Mobile Hamburger Icon */}
      <div className="md:hidden p-4">
        <button onClick={toggleSidebar} className="text-purple-600">
          <FiMenu className="text-3xl" />
        </button>
      </div>

      {/* Content Area */}
      <div className={`flex-1 p-8 bg-white transition-all duration-300 ${isSidebarOpen ? "blur-sm" : ""}`}>
        <button
          className="mb-6 flex items-center text-purple-600 hover:text-purple-800 transition-colors"
          onClick={() => router.back()}
        >
          <FiArrowLeft className="mr-2" /> Back
        </button>
        <h1 className="text-4xl font-semibold text-purple-700 mb-6">Class 11th Study Materials</h1>
        <p className="text-lg text-gray-700 mb-6">Welcome to the Class 11 page! Here you'll find all the resources you need to prepare for your exams.</p>

        {/* Display the PDF viewer (iframe) */}
        {isPdfVisible && pdfUrl && (
          <div className="w-full h-[600px] mt-6 relative shadow-lg rounded-lg">
            <button
              className="absolute top-4 right-4 bg-purple-600 text-white p-2 rounded-full"
              onClick={() => setIsPdfVisible(false)}
            >
              X
            </button>
            <iframe
              src={pdfUrl}
              width="100%"
              height="100%"
              frameBorder="0"
              title="PDF Viewer"
            />
          </div>
        )}

        {/* Display cards for the selected section */}
        {renderCards()}

        {/* Display download message on mobile */}
        {isMobile && downloadMessage && (
          <div className="fixed top-0 left-0 w-full p-4 bg-green-500 text-white text-center shadow-lg z-20">
            {downloadMessage}
          </div>
        )}

        {/* Pagination Controls */}
        {selectedSection && !isPdfVisible && (
          <div className="flex justify-between items-center mt-8">
            <button
              onClick={() => handlePageChange("prev")}
              className="flex items-center bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
              disabled={currentPage === 1}
            >
              <FiChevronLeft className="mr-2" /> Previous
            </button>
            <span className="text-lg text-gray-700">
              {/* Page {currentPage} of {Math.ceil(totalCards / cardsPerPage)} */}
            </span>
            <button
              onClick={() => handlePageChange("next")}
              className="flex items-center bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
              disabled={currentPage === Math.ceil(totalCards / cardsPerPage)}
            >
              Next <FiChevronRight className="ml-2" />
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Class10Page;

// pdf data 
const chemistryTopics = [
    {
      id: 3,
      topic: "Chemical Kinetics",
      pdfs: [
        { id: "3a", title: "10 year", url: "/class12/chemical-kinetics/Chapter-4-Chemical-Kinetics.pdf" },
        {
          id: "3b",
          title: "MCQs",
          url: "/class12/chemical-kinetics/Chemical-kinetics-MCQs.pdf",
        },
        {
          id: "3c",
          title: "Marks Wise Questions",
          url: "/class12/chemical-kinetics/Marks-wise-Questions.pdf",
        },
        {
          id: "3d",
          title: "Practice Questions",
          url: "/class12/chemical-kinetics/Practice-Questions.pdf",
        },
        {
          id: "3e",
          title: "Prev. year Question Paper",
          url: "/class12/chemical-kinetics/Prevoius-year-Questions.pdf",
        },
        {
          id: "3f",
          title: "PYQs",
          url: "/class12/chemical-kinetics/PYQs.pdf",
        },
        {
          id: "3g",
          title: "Test Paper 1",
          url: "/class12/chemical-kinetics/Test-Paper-01.pdf",
        },
        {
          id: "3h",
          title: "Test Paper 2",
          url: "/class12/chemical-kinetics/Test-Paper-02.pdf",
        },
        {
          id: "3i",
          title: "Test Paper 3",
          url: "/class12/chemical-kinetics/Test-Paper-03.pdf",
        },
        {
          id: "3j",
          title: "Test Paper 4",
          url: "/class12/chemical-kinetics/Test-Paper-04.pdf",
        },
        {
          id: "3k",
          title: "Test Paper 5",
          url: "/class12/chemical-kinetics/Test-Paper-05.pdf",
        },
        {
          id: "3l",
          title: "VBQs",
          url: "/class12/chemical-kinetics/VBQs.pdf",
        },
        {
          id: "3m",
          title: "WorkSheet 1",
          url: "/class12/chemical-kinetics/W1.pdf",
        },
        {
          id: "3n",
          title: "WorkSheet 2",
          url: "/class12/chemical-kinetics/W2.pdf",
        },
      ],
    },
  ];